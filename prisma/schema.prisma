// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  points        Float     @default(0)
  rating        Float     @default(5)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  
  // Relations
  participations Participation[]
  teamMembers    TeamMember[]
}

model Game {
  id            String    @id @default(cuid())
  date          DateTime
  time          String
  location      String
  status        String    @default("upcoming") // upcoming, completed, cancelled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  participations Participation[]
  teams          Team[]
}

model Participation {
  id            String    @id @default(cuid())
  userId        String
  gameId        String
  status        String    // participant, reserve
  rating        Float?    // Admin rating for this game (1-10)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([userId, gameId])
}

model Team {
  id            String    @id @default(cuid())
  gameId        String
  name          String
  score         Int?
  totalRating   Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  members       TeamMember[]
}

model TeamMember {
  id            String    @id @default(cuid())
  teamId        String
  userId        String
  createdAt     DateTime  @default(now())
  
  // Relations
  team          Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
}

